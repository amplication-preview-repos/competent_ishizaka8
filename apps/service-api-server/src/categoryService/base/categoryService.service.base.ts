/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CategoryService as PrismaCategoryService,
  Service as PrismaService,
} from "@prisma/client";
import { ServiceWhereInput } from "../../service/base/ServiceWhereInput";

export class CategoryServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoryServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categoryService.count(args);
  }

  async categoryServices(
    args: Prisma.CategoryServiceFindManyArgs
  ): Promise<PrismaCategoryService[]> {
    return this.prisma.categoryService.findMany(args);
  }
  async categoryService(
    args: Prisma.CategoryServiceFindUniqueArgs
  ): Promise<PrismaCategoryService | null> {
    return this.prisma.categoryService.findUnique(args);
  }
  async createCategoryService(
    args: Prisma.CategoryServiceCreateArgs
  ): Promise<PrismaCategoryService> {
    return this.prisma.categoryService.create(args);
  }
  async updateCategoryService(
    args: Prisma.CategoryServiceUpdateArgs
  ): Promise<PrismaCategoryService> {
    return this.prisma.categoryService.update(args);
  }
  async deleteCategoryService(
    args: Prisma.CategoryServiceDeleteArgs
  ): Promise<PrismaCategoryService> {
    return this.prisma.categoryService.delete(args);
  }

  async findServices(
    parentId: string,
    args: Prisma.ServiceFindManyArgs
  ): Promise<PrismaService[]> {
    return this.prisma.categoryService
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .services(args);
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.categoryService
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
  async GetCategoryServices(args: string): Promise<ServiceWhereInput[]> {
    throw new Error("Not implemented");
  }
}
